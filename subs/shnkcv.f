C*********************************************************************
C double precision function Single Harmonic and Node K Cross V func. *
C                           -      -            -    - -     -       *
C Steve Gibbons Wed Jan 26 11:40:35 GMT 2000                         C
C____________________________________________________________________C
C                                                                    C
C For a velocity harmonic number IHA (velocity stored in VECA)       C
C SHNKCV will evaluate the necessary radial functions and their      C
C derivatives to evaluate the contributions as defined in equations  C
C (B.55) to (B.59) of my thesis.                                     C
C                                                                    C
C This is evaluated at the grid node IR.                             C
C                                                                    C
C Only the degree, l, of the output (gamma) harmonic is required     C
C and is supplied in the integer variable LG.                        C
C____________________________________________________________________C
C                                                                    C
C Input variables :-                                                 C
C ===============                                                    C
C  Integer                                                           C
C  -------                                                           C
C     IR        : Number of radial grid node.                        C
C     NBN       : Number of bounding nodes. See above.               C
C     NR        : Number of radial grid nodes in each function.      C
C     NDRVS     : Number of highest derivative for which             C
C                  coefficients are stored by the array SVFDC.       C
C     NDRVM     : Limit on NDRVS. Array bound for SVFDC.             C
C     NFDCM     : Leading dimension of SVFDC. At least (2*NBN+1)     C
C     NDCS      : Maximum distinct finite difference schemes         C
C                  stored by the array SVFDC.                        C
C     LA        : Spherical harmonic degree of velocity harm. alpha  C
C     IHA       : Number of harmonic in velocity expansion.          C
C     ISA       : Number of finite difference scheme used for        C
C                  velocity harmonic.                                C
C     INARRA    : Format of VECA containing velocity radial function C
C                 Integer array dimension ( * ).                     C
C                  Elements may be arbitrary except for              C
C                 INARRA( 1 ) = IFORMF - flag for vector format.     C
C                                        See INDFUN                  C
C                 INARRA( 2 ) = NRR. Must be consistent with NR.     C
C                 INARRA( 3 ) = NHA = total number of radial func.s  C
C                                                                    C
C     LG        : Spherical harmonic degree of velocity harm. gamma  C
C                                                                    C
C  Double Precision                                                  C
C  ----------------                                                  C
C                                                                    C
C     RAD       : Value of radius.                                   C
C     VECA      : Solution vector for velocity. Dim ( * )            C
C     SVFDC     : Finite difference coefficient matrix.              C
C                  Dimension ( NFDCM, NR, NDRVM+1, NDCS ).           C
C                   Array is generated by the routine svfdcf         C
C                 See documentation for SVFDCF for details.          C
C                                                                    C
C  Character                                                         C
C  ---------                                                         C
C                                                                    C
C     TYPE      : *(4) One of 'KCQT', 'KCST', 'KCSQ', etc.           C
C                 Indicates the interaction type required.           C
C                                                                    C
C____________________________________________________________________C
C
C*********************************************************************
      FUNCTION SHNKCV( IR, RAD, NBN, TYPE, NR, NDRVS, NDRVM, NFDCM,
     1                 NDCS, SVFDC, LA, VECA, IHA, ISA, INARRA, LG )
      IMPLICIT NONE
C____________________________________________________________________C
C Variable declarations - Parameters ................................C
      INTEGER IR, NBN, NR, NDRVS, NDRVM, NFDCM, NDCS, LA, IHA, ISA,
     1        INARRA( 3 ), LG
      DOUBLE PRECISION RAD, SVFDC( NFDCM, NR, NDRVM+1, NDCS ),
     1                 VECA( * ), SHNKCV
      CHARACTER *(4) TYPE
C____________________________________________________________________C
C Variable declarations - Working variables .........................C
C
      INTEGER IHDA
      DOUBLE PRECISION FLA, FLG, SQRLL1, WORKA( 3 ), TEMP, LOW
      PARAMETER ( LOW = 1.0d-9 )
C____________________________________________________________________C
C START OF PROGRAM **************************************************C
C____________________________________________________________________C
C
      IF ( RAD.LT.LOW ) THEN
        PRINT *,' Function SHNKCV.'
        PRINT *,' RAD = ', RAD
        PRINT *,' A division by zero will occur.'
        PRINT *,' Program aborted.'
        STOP
      ENDIF
C
      IF ( TYPE.EQ.'KCQT' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of poloidal radial function. 
C       .
        IHDA = 0
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains P_{ALPHA}( r )
C       .
        SHNKCV = (-1.0d0)*FLA*FLA*WORKA( 1 )/(RAD*FLG)
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCST' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of poloidal radial function.
C       .
        IHDA = 1
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains P_{ALPHA}( r )
C       WORKA( 2 ) now contains d P_{ALPHA}( r )/ dr
C       .
        TEMP   = WORKA( 2 ) + WORKA( 1 )/RAD
        SHNKCV = (-1.0d0)*FLA*TEMP/FLG
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCSQ' ) THEN
        FLA = SQRLL1( LA )
C       .
C       . Take derivative of poloidal radial function.
C       .
        IHDA = 1
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains P_{ALPHA}( r )
C       WORKA( 2 ) now contains d P_{ALPHA}( r )/ dr
C       .
        TEMP   = WORKA( 2 ) + WORKA( 1 )/RAD
        SHNKCV = FLA*TEMP/RAD
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCSS' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of poloidal radial function.
C       .
        IHDA = 2
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 2 ) now contains d P_{ALPHA}( r )/ dr
C       WORKA( 3 ) now contains d^2 P_{ALPHA}( r )/ dr^2
C       .
        TEMP   = WORKA( 3 ) + 2.0d0*WORKA( 2 )/RAD
        SHNKCV = (-1.0d0)*FLA*TEMP/FLG
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCQS' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of poloidal radial function.
C       .
        IHDA = 1
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 2 ) now contains d P_{ALPHA}( r )/ dr
C       .
        TEMP   = WORKA( 2 )/RAD
        SHNKCV = (-1.0d0)*FLA*FLA*TEMP/FLG
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCTT' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of toroidal radial function.
C       .
        IHDA = 0
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains tor_{ALPHA}( r )
C       .
        SHNKCV = FLA*WORKA( 1 )/FLG
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCTS' ) THEN
        FLA = SQRLL1( LA )
        FLG = SQRLL1( LG )
C       .
C       . Take derivative of toroidal radial function.
C       .
        IHDA = 1
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains tor_{ALPHA}( r )
C       WORKA( 2 ) now contains d tor_{ALPHA}( r )/ dr
C       .
        TEMP   = WORKA( 1 )/RAD + WORKA( 2 )
        SHNKCV = FLA*TEMP/FLG
        RETURN
C       .
      ENDIF
C     .
      IF ( TYPE.EQ.'KCTQ' ) THEN
        FLA = SQRLL1( LA )
C       .
C       . Take derivative of toroidal radial function.
C       .
        IHDA = 0
        CALL ASVDR( VECA, IR, ISA, IHA, NBN, IHDA, NFDCM, NR,
     1            NDRVS, NDRVM, WORKA, INARRA, SVFDC, NDCS )
C       .
C       WORKA( 1 ) now contains tor_{ALPHA}( r )
C       .
        SHNKCV = (-1.0d0)*FLA*WORKA( 1 )/RAD
        RETURN
C       .
      ENDIF
C     .
      PRINT *,' Function SHNKCV.'
      PRINT *,' TYPE = ', TYPE
      PRINT *,' Program aborted.'
      STOP
      END
C*********************************************************************

